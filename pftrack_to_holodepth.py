# Project: HoloDepth - PFTrack Exporter
# Version: 4.3 (Python 2.0, forward-slash paths, lowercase img_ prefix)
# Author: Generated by ChatGPT

import pfpy
import os
try:
    import json
except:
    import simplejson as json
import math

# ---------------- User Settings ----------------
IMAGE_FOLDER = r"C:\Users\USERNAME\Documents\PFTrackImages"  # Folder containing your sequence
SEQUENCE_PREFIX = "img_"   # Prefix for your images (lowercase)
SEQUENCE_PADDING = "####"  # e.g., #### -> zero-padded to 4 digits
IMAGE_EXTENSION = "jpg"    # File extension
OUTPUT_FILENAME = "models.json"  # Output JSON file
# -----------------------------------------------

# Convert padding string to integer width
PADDING_WIDTH = SEQUENCE_PADDING.count("#")

# ---------------- Debug ----------------
def debug(msg):
    print str(msg)

# ---------------- Math ----------------
def matrix_multiply(A, B):
    C = [[0,0,0],[0,0,0],[0,0,0]]
    for i in range(3):
        for j in range(3):
            for k in range(3):
                C[i][j] += A[i][k] * B[k][j]
    return C

def euler_to_rotation_matrix(rotation):
    roll, pitch, yaw = [math.radians(a) for a in rotation]
    Rx = [[1,0,0],[0,math.cos(roll),-math.sin(roll)],[0,math.sin(roll),math.cos(roll)]]
    Ry = [[math.cos(pitch),0,math.sin(pitch)],[0,1,0],[-math.sin(pitch),0,math.cos(pitch)]]
    Rz = [[math.cos(yaw),-math.sin(yaw),0],[math.sin(yaw),math.cos(yaw),0],[0,0,1]]
    return matrix_multiply(Rx, matrix_multiply(Ry, Rz))

def rotation_matrix_to_axis_angle(R):
    trace = R[0][0] + R[1][1] + R[2][2]
    clipped = max(-1.0, min(1.0, (trace - 1.0)/2.0))
    angle = math.acos(clipped)
    if abs(angle) < 1e-6:
        return [0.0,0.0,0.0]
    rx, ry, rz = R[2][1]-R[1][2], R[0][2]-R[2][0], R[1][0]-R[0][1]
    axis = [rx, ry, rz]
    norm = math.sqrt(sum(c*c for c in axis))
    if norm < 1e-6:
        norm = 1.0
    axis = [c/norm for c in axis]
    return [c*angle for c in axis]

# ---------------- Export ----------------
def export_for_holodepth():
    debug("--- HoloDepth Exporter v4.3 ---")

    if not os.path.exists(IMAGE_FOLDER):
        debug("ERROR: IMAGE_FOLDER does not exist: %s" % IMAGE_FOLDER)
        return

    try:
        cam = pfpy.getCameraRef(0)
    except:
        debug("ERROR: Could not get PFTrack camera.")
        return

    start_frame, end_frame = cam.getInPoint(), cam.getOutPoint()
    width, height = cam.getFrameWidth(), cam.getFrameHeight()
    debug("Frames %d - %d" % (start_frame, end_frame))

    camera_data_list = []

    for frame in xrange(start_frame, end_frame+1):
        frame_index = frame - start_frame + 1

        # Build the filename with zero-padding based on SEQUENCE_PADDING
        filename = os.path.join(
            IMAGE_FOLDER,
            "%s%0*d.%s" % (SEQUENCE_PREFIX, PADDING_WIDTH, frame_index, IMAGE_EXTENSION)
        )

        # Convert to forward slashes for JSON output
        filename_json = filename.replace("\\", "/")

        if not os.path.exists(filename):
            debug("WARNING: Frame %d image not found: %s" % (frame, filename_json))
        debug("Frame %d -> using image: %s" % (frame, filename_json))

        # Extract camera data
        try:
            rotation = cam.getEulerRotation(frame, 'xyz')
            orientation = rotation_matrix_to_axis_angle(euler_to_rotation_matrix(rotation))
            camera_info = {
                "position": cam.getTranslation(frame),
                "orientation": orientation,
                "focal_length": cam.getFocalLength(frame, 'pixels'),
                "principal_point": [width/2.0, height/2.0],
                "width": float(width),
                "height": float(height),
                "pixel_aspect_ratio": 1.0,
                "relative_path": filename_json,
            }
            camera_data_list.append(camera_info)
        except Exception, e:
            debug("Skipping frame %d, error: %s" % (frame, str(e)))

    final_output = [camera_data_list]

    # Export to Desktop
    home = os.environ.get("HOME", os.path.expanduser("~"))
    output_path = os.path.join(home, "Desktop", OUTPUT_FILENAME)

    try:
        f = open(output_path, "w")
        f.write(json.dumps(final_output, indent=4))
        f.close()
        debug("SUCCESS: wrote %s with %d frames" % (output_path, len(camera_data_list)))
    except Exception, e:
        debug("ERROR writing file: %s" % str(e))

# ---------------- Run ----------------
export_for_holodepth()
